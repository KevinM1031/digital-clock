{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\Source\\\\Repos\\\\main-page\\\\src\\\\pages\\\\MainPage\\\\MainPage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Avatar, Button, CssBaseline, TextField, FormControlLabel, Checkbox, Paper, Box, Grid, Typography, CircularProgress } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { useNavigate } from \"react-router-dom\";\nimport { useStyles } from \"./LoginPageStyles\";\nimport CopyRight from \"../../components/ui/CopyRight\";\nimport { Link } from \"react-router-dom\";\nimport { checkEmailValidity } from \"../../models/User\";\nimport { loginByEmailAndPassword } from \"../../components/database/FirebaseAPI\";\nimport { AlertTitle } from \"@material-ui/lab\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateSignIn = e => {\n      e.preventDefault();\n\n      if (!checkEmailValidity(this.state.email)) {\n        // If email is empty or invalid, set the necessary error for display\n        this.setState({\n          emailError: \"Please enter a valid email!\"\n        }); // If password is also empty, do the same\n\n        if (!this.state.password) {\n          this.setState({\n            passwordError: \"Please enter your password!\"\n          });\n        }\n\n        return;\n      } // If email and password has been entered, waits for Firebase to give us feed back\n      // and set loading state to true to display loading spinner, since the loading spinner\n      // only displays if the isLoading state is set to true (see html below).\n\n\n      this.setState({\n        isLoading: true\n      }); // Call the encapsulated login method that uses Firebase's signInWithEmailAndPassword method\n\n      loginByEmailAndPassword(this.state.email, this.state.password).then(userCredential => {\n        this.setState({\n          isLoading: false\n        }); // go to the home page since sign in was successful\n\n        this.props.login();\n      }).catch(error => {\n        this.setState({\n          isLoading: false\n        }); // display the error message returned by Firebase since sign in was not successful\n\n        this.setState({\n          firebaseLoginError: error.message\n        });\n      });\n    };\n\n    this.displayFirebaseLoginError = () => {\n      // If the firebase login error message has been set, display it with an Alert\n      if (this.state.firebaseLoginError) {\n        return /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"error\",\n          children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n            children: \"Failed to login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: this.state.firebaseLoginError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this);\n      }\n\n      return \"\";\n    };\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      emailError: \"\",\n      passwordError: \"\",\n      firebaseLoginError: \"\",\n      isLoading: false\n    };\n  }\n  /**\r\n   * Checks whether credentials entered are valid and set the error messages accordingly\r\n   * @param e the event object triggered by the sign-in button\r\n   */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: // Displays loading spinner if we are waiting for Firebase to log user in or giving user an error\n      this.state.isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\",\n        className: this.props.classes.loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this) // Else, just display the login page\n      : /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        component: \"main\",\n        className: this.props.classes.root,\n        children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: false,\n          sm: 4,\n          md: 7,\n          className: this.props.classes.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 8,\n          md: 5,\n          component: Paper,\n          elevation: 6,\n          square: true,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: this.props.classes.paper,\n            children: [/*#__PURE__*/_jsxDEV(Avatar, {\n              className: this.props.classes.avatar,\n              children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"h1\",\n              variant: \"h5\",\n              children: \"Sign in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              className: this.props.classes.form,\n              noValidate: true,\n              onSubmit: this.validateSignIn,\n              children: [this.displayFirebaseLoginError(), /*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"outlined\",\n                margin: \"normal\",\n                required: true,\n                fullWidth: true,\n                id: \"email\",\n                label: \"Email Address\",\n                name: \"email\",\n                autoComplete: \"email\",\n                autoFocus: true,\n                onChange: e => {\n                  this.setState({\n                    email: e.target.value,\n                    emailError: \"\"\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 37\n              }, this), this.state.emailError ? /*#__PURE__*/_jsxDEV(Alert, {\n                severity: \"error\",\n                children: this.state.emailError\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 62\n              }, this) : \"\", /*#__PURE__*/_jsxDEV(TextField, {\n                variant: \"outlined\",\n                margin: \"normal\",\n                required: true,\n                fullWidth: true,\n                name: \"password\",\n                label: \"Password\",\n                type: \"password\",\n                id: \"password\",\n                autoComplete: \"current-password\",\n                onChange: e => {\n                  this.setState({\n                    password: e.target.value,\n                    passwordError: \"\"\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 37\n              }, this), this.state.passwordError ? /*#__PURE__*/_jsxDEV(Alert, {\n                severity: \"error\",\n                children: this.state.passwordError\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 65\n              }, this) : \"\", /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  value: \"remember\",\n                  color: \"primary\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 50\n                }, this),\n                label: \"Remember me\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                fullWidth: true,\n                variant: \"contained\",\n                color: \"primary\",\n                className: this.props.classes.submit,\n                children: \"Sign In\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  xs: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  item: true,\n                  children: /*#__PURE__*/_jsxDEV(Link, {\n                    className: this.props.classes.link,\n                    to: \"/signup\",\n                    children: \"Don't have an account? Sign up!\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                mt: 5,\n                children: /*#__PURE__*/_jsxDEV(CopyRight, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst LoginPage = () => {\n  _s();\n\n  const classes = useStyles();\n  const navigate = useNavigate();\n\n  const login = () => {\n    // Navigate to student view by default for now\n    // Will need to implement distinctions between logging in as an instructor vs. as a student later\n    navigate(\"/studentView\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(LoginForm, {\n    classes: classes,\n    login: login\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoginPage, \"pvfM4ZXsoMI5DaOvCNwyBjRqjLg=\", false, function () {\n  return [useStyles, useNavigate];\n});\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["C:/Users/kevin/Source/Repos/main-page/src/pages/MainPage/MainPage.js"],"names":["React","Avatar","Button","CssBaseline","TextField","FormControlLabel","Checkbox","Paper","Box","Grid","Typography","CircularProgress","Alert","LockOutlinedIcon","useNavigate","useStyles","CopyRight","Link","checkEmailValidity","loginByEmailAndPassword","AlertTitle","LoginForm","Component","constructor","props","validateSignIn","e","preventDefault","state","email","setState","emailError","password","passwordError","isLoading","then","userCredential","login","catch","error","firebaseLoginError","message","displayFirebaseLoginError","render","classes","loading","root","image","paper","avatar","form","target","value","submit","link","LoginPage","navigate"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Avatar, Button, CssBaseline, TextField, FormControlLabel,\r\n        Checkbox, Paper, Box, Grid, Typography,  CircularProgress} from '@material-ui/core';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useStyles} from \"./LoginPageStyles\";\r\nimport CopyRight from \"../../components/ui/CopyRight\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { checkEmailValidity } from \"../../models/User\";\r\nimport {loginByEmailAndPassword} from \"../../components/database/FirebaseAPI\";\r\nimport {AlertTitle} from \"@material-ui/lab\";\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {email: \"\", password: \"\",\r\n                      emailError: \"\", passwordError: \"\",\r\n                      firebaseLoginError: \"\",\r\n                      isLoading: false};\r\n    }\r\n\r\n    /**\r\n     * Checks whether credentials entered are valid and set the error messages accordingly\r\n     * @param e the event object triggered by the sign-in button\r\n     */\r\n    validateSignIn = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if (!checkEmailValidity(this.state.email)) {\r\n            // If email is empty or invalid, set the necessary error for display\r\n            this.setState({emailError: \"Please enter a valid email!\"});\r\n\r\n            // If password is also empty, do the same\r\n            if (!this.state.password) {\r\n                this.setState({passwordError: \"Please enter your password!\"});\r\n            }\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        // If email and password has been entered, waits for Firebase to give us feed back\r\n        // and set loading state to true to display loading spinner, since the loading spinner\r\n        // only displays if the isLoading state is set to true (see html below).\r\n        this.setState({isLoading: true})\r\n\r\n        // Call the encapsulated login method that uses Firebase's signInWithEmailAndPassword method\r\n        loginByEmailAndPassword(this.state.email, this.state.password).then((userCredential) => {\r\n            this.setState({isLoading: false})\r\n            // go to the home page since sign in was successful\r\n            this.props.login();\r\n        }).catch((error) => {\r\n            this.setState({isLoading: false});\r\n            // display the error message returned by Firebase since sign in was not successful\r\n            this.setState({firebaseLoginError: error.message})\r\n        })\r\n\r\n    }\r\n\r\n    /**\r\n     * Method for displaying Firebase error message\r\n     * @returns {JSX.Element|string}\r\n     */\r\n    displayFirebaseLoginError = () => {\r\n\r\n        // If the firebase login error message has been set, display it with an Alert\r\n        if (this.state.firebaseLoginError) {\r\n            return (\r\n                <Alert severity=\"error\">\r\n                    <AlertTitle>Failed to login</AlertTitle>\r\n                    <strong>{this.state.firebaseLoginError}</strong>\r\n                </Alert>\r\n            )\r\n        }\r\n\r\n        return (\"\");\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    // Displays loading spinner if we are waiting for Firebase to log user in or giving user an error\r\n                    this.state.isLoading?\r\n                    <CircularProgress color=\"secondary\" className={this.props.classes.loading}/>\r\n\r\n                    // Else, just display the login page\r\n                    :\r\n                    <Grid container component=\"main\" className={this.props.classes.root}>\r\n                        <CssBaseline />\r\n                        <Grid item xs={false} sm={4} md={7} className={this.props.classes.image} />\r\n                        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n                            <div className={this.props.classes.paper}>\r\n                                <Avatar className={this.props.classes.avatar}>\r\n                                    <LockOutlinedIcon  />\r\n                                </Avatar>\r\n                                <Typography component=\"h1\" variant=\"h5\">\r\n                                    Sign in\r\n                                </Typography>\r\n                                <form className={this.props.classes.form} noValidate onSubmit={this.validateSignIn}>\r\n                                    {this.displayFirebaseLoginError()}\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        margin=\"normal\"\r\n                                        required\r\n                                        fullWidth\r\n                                        id=\"email\"\r\n                                        label=\"Email Address\"\r\n                                        name=\"email\"\r\n                                        autoComplete=\"email\"\r\n                                        autoFocus\r\n                                        onChange={(e) =>\r\n                                        {this.setState({email: e.target.value, emailError: \"\"})}}\r\n                                    />\r\n                                    {this.state.emailError ? <Alert severity=\"error\">{this.state.emailError}</Alert> : \"\"}\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        margin=\"normal\"\r\n                                        required\r\n                                        fullWidth\r\n                                        name=\"password\"\r\n                                        label=\"Password\"\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        autoComplete=\"current-password\"\r\n                                        onChange={(e) =>\r\n                                        {this.setState({password: e.target.value, passwordError: \"\"});}}\r\n                                    />\r\n                                    {this.state.passwordError ? <Alert severity=\"error\">{this.state.passwordError}</Alert> : \"\"}\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                                        label=\"Remember me\"\r\n                                    />\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        fullWidth\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        className={this.props.classes.submit}\r\n                                    >\r\n                                        Sign In\r\n                                    </Button>\r\n                                    <Grid container>\r\n                                        <Grid item xs>\r\n                                            {/*<Link>*/}\r\n                                            {/*    Forgot password?*/}\r\n                                            {/*</Link>*/}\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Link className={this.props.classes.link} to=\"/signup\">\r\n                                                {\"Don't have an account? Sign up!\"}\r\n                                            </Link>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Box mt={5}>\r\n                                        <CopyRight />\r\n                                    </Box>\r\n                                </form>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nconst LoginPage = () => {\r\n    const classes = useStyles();\r\n    const navigate = useNavigate();\r\n\r\n    const login = () => {\r\n\r\n        // Navigate to student view by default for now\r\n        // Will need to implement distinctions between logging in as an instructor vs. as a student later\r\n        navigate(\"/studentView\");\r\n    }\r\n\r\n    return (\r\n        <LoginForm classes={classes} login={login}/>\r\n    )\r\n}\r\n\r\nexport default LoginPage;\r\n"]},"metadata":{},"sourceType":"module"}